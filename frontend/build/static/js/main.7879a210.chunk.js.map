{"version":3,"sources":["components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","Context/ChatProvider.js","components/ScrollableChat.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","history","useHistory","submitHandler","title","status","duration","isClosable","position","config","headers","axios","post","data","localStorage","setItem","JSON","stringify","push","description","response","message","spacing","id","isRequired","value","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","console","log","p","accept","pics","undefined","FormData","append","fetch","method","body","then","res","json","url","toString","catch","err","postDetails","files","Homepage","socket","selectedChatCompare","useEffect","parse","getItem","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","isLastMessage","isSameUser","getSender","loggedUser","users","ProfileModal","user","children","useDisclosure","isOpen","onOpen","onClose","base","icon","isCentered","flexDir","alignItems","boxSize","src","alt","md","ChatContext","createContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","setUser","notification","setNotification","chats","setChats","userInfo","Provider","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","backgroundColor","marginLeft","padding","maxWidth","content","UserBadgeItem","handleFunction","admin","px","py","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","Authorization","token","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","flexWrap","pb","ml","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","options","marginBottom","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","notif","n","as","Button","removeItem","borderBottomWidth","Chatpage","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7879a210.chunk.js","sourcesContent":["import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    // console.log(email, password);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.post(\r\n        \"/api/user/login\",\r\n        { email, password },\r\n        config\r\n      );\r\n\r\n      // console.log(JSON.stringify(data));\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(name, email, password, pic);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        \"/api/user\",\r\n        {\r\n          name,\r\n          email,\r\n          password,\r\n          pic,\r\n        },\r\n        config\r\n      );\r\n      console.log(data);\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  const postDetails = (pics) => {\r\n    setPicLoading(true);\r\n    if (pics === undefined) {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    console.log(pics);\r\n    if (pics.type === \"image/jpeg\" || pics.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", pics);\r\n      data.append(\"upload_preset\", \"chat-app\");\r\n      data.append(\"cloud_name\", \"piyushproj\");\r\n      fetch(\"https://api.cloudinary.com/v1_1/piyushproj/image/upload\", {\r\n        method: \"post\",\r\n        body: data,\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          setPic(data.url.toString());\r\n          console.log(data.url.toString());\r\n          setPicLoading(false);\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setPicLoading(false);\r\n        });\r\n    } else {\r\n      toast({\r\n        title: \"Please Select an Image!\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => postDetails(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import { FormControl } from \"@chakra-ui/form-control\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport Lottie from \"react-lottie\";\r\nimport animationData from \"../animations/typing.json\";\r\n\r\nimport io from \"socket.io-client\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nconst ENDPOINT = \"http://localhost:5000\"; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: animationData,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } =\r\n    ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      setLoading(true);\r\n\r\n      const { data } = await axios.get(\r\n        `/api/message/${selectedChat._id}`,\r\n        config\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n        };\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          config\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n\r\n    // eslint-disable-next-line\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n\r\n    selectedChatCompare = selectedChat;\r\n    // eslint-disable-next-line\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages &&\r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n            >\r\n              {istyping ? (\r\n                <div>\r\n                  <Lottie\r\n                    options={defaultOptions}\r\n                    // height={50}\r\n                    width={70}\r\n                    style={{ marginBottom: 15, marginLeft: 0 }}\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <></>\r\n              )}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message..\"\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        // to get socket.io on same page\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  // console.log(i === messages.length - 1);\r\n\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#B9F5D0\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst UserListItem = ({ handleFunction }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#38B2AC\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        config\r\n      );\r\n\r\n      console.log(data._id);\r\n      // setSelectedChat(\"\");\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.put(\r\n        `/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        config\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {selectedChat.chatName}\r\n          </ModalHeader>\r\n\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n              {selectedChat.users.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  admin={selectedChat.groupAdmin}\r\n                  handleFunction={() => handleRemove(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            <FormControl d=\"flex\">\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                value={groupChatName}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n              <Button\r\n                variant=\"solid\"\r\n                colorScheme=\"teal\"\r\n                ml={1}\r\n                isLoading={renameloading}\r\n                onClick={handleRename}\r\n              >\r\n                Update\r\n              </Button>\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add User to group\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n\r\n            {loading ? (\r\n              <Spinner size=\"lg\" />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => handleAddUser(user)}\r\n                />\r\n              ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n              Leave Group\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { user, chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n      console.log(data);\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(\r\n        `/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },\r\n        config\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              // <ChatLoading />\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, user, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n\r\n  const fetchChats = async () => {\r\n    // console.log(user._id);\r\n    try {\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(\"/api/chat\", config);\r\n      setChats(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n    // eslint-disable-next-line\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#38B2AC\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n\r\n      const config = {\r\n        headers: {\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n\r\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\r\n\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    console.log(userId);\r\n\r\n    try {\r\n      setLoadingChat(true);\r\n      const config = {\r\n        headers: {\r\n          \"Content-type\": \"application/json\",\r\n          Authorization: `Bearer ${user.token}`,\r\n        },\r\n      };\r\n      const { data } = await axios.post(`/api/chat`, { userId }, config);\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Talk-A-Tive\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Go</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((user) => (\r\n                <UserListItem\r\n                  key={user._id}\r\n                  user={user}\r\n                  handleFunction={() => accessChat(user._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}